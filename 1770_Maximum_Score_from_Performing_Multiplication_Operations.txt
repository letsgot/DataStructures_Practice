You are given two integer arrays nums and multipliers of size n and m respectively, where n >= m. The arrays are 1-indexed.

You begin with a score of 0. You want to perform exactly m operations. On the ith operation (1-indexed), you will:

Choose one integer x from either the start or the end of the array nums.
Add multipliers[i] * x to your score.
Remove x from the array nums.
Return the maximum score after performing m operations.

Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]
Output: 102
Explanation: An optimal solution is as follows:
- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.
- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.
- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.
- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.
- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. 
The total score is 50 + 15 - 9 + 4 + 42 = 102.


solution :- 
why  :- just think of recursion and try the memoization

class Solution {
    Integer[][]dp;
    public int maximumScore(int[] nums, int[] multipliers) {
        dp = new Integer[multipliers.length][multipliers.length];
        int max = helper(0,nums.length-1,0,nums,multipliers);
        return max;
    }
    
    public int helper(int i,int j,int k,int [] nums,int [] mul){
        if(k==mul.length||j<i){
            return 0;
        }
        
        if(dp[k][i]!=null){
            return dp[k][i];
        }
        
        int left = helper(i+1,j,k+1,nums,mul);
        int lmax = nums[i] * mul[k] + left;
        
        int right = helper(i,j-1,k+1,nums,mul);
        int rmax = nums[j] * mul[k] + right;
        
        int max = Math.max(rmax,lmax);
        
        dp[k][i] = max;
        
        return max;
        
    }
}