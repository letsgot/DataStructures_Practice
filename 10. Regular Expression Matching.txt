Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).
    
    Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".


Solution:- 
class Solution {
    public boolean isMatch(String s, String p) {
        boolean dp[][] = new boolean[s.length()+1][p.length()+1];
        
        for(int i=dp.length-1;i>=0;i--){
            for(int j=dp[0].length-1;j>=0;j--){
                if(dp.length-1==i&&j==dp[0].length-1){
                    dp[i][j] = true;
                }
                else if(j==dp[0].length-1){
                    dp[i][j] = false;
                }
                else if(i==dp.length-1){
                    if(j+1<p.length()&&p.charAt(j+1)=='*'){
                        dp[i][j] = dp[i][j+2];
                    }
                    else{
                        dp[i][j] = false;
                    }
                }
                else {
                    if(j+1<p.length()&&p.charAt(j+1)=='*'){
                        if(s.charAt(i)==p.charAt(j)||p.charAt(j)=='.'){
                            dp[i][j] = dp[i][j+2] || dp[i+1][j];
                        }
                        else{
                            dp[i][j] = dp[i][j+2];
                        }
                    }
                    else{
                        if(p.charAt(j)=='.'||s.charAt(i)==p.charAt(j)){
                            dp[i][j] = dp[i+1][j+1];
                        }
                        else{
                            dp[i][j] = false;
                        }
                    }
                }
            }
        }
        
        return dp[0][0];
    }
}