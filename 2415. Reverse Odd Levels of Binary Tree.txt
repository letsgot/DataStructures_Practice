Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.

For example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].
Return the root of the reversed tree.

A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.

The level of a node is the number of edges along the path between it and the root node.


Approach hai 
hashmap rakh lo interger k saamne arraylist ek baar bhar lvl k saamne uski value preorder
m then dusri baar m piche se arraylist se ans daal do preorder m he 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer,ArrayList<Integer>> map; 
    public TreeNode reverseOddLevels(TreeNode root) {
        map = new HashMap<>();
        helper(root,0);
        helper2(root,0);
        return root;
    }
    
    public void helper(TreeNode root,int lvl){
        if(root==null){
            return;
        }
        
        if(lvl%2==1){
            if(map.containsKey(lvl)){
                ArrayList<Integer> l = map.get(lvl);
                l.add(root.val);
            }
            else{
                ArrayList<Integer> l = new ArrayList<>();
                l.add(root.val);
                map.put(lvl,l);
            }
        }
        
        helper(root.left,lvl+1);
        helper(root.right,lvl+1);
    }
    
    public void helper2(TreeNode root,int lvl){
        if(root==null){
            return;
        }
        
        if(lvl%2==1){
            ArrayList<Integer> l = map.get(lvl);
            root.val = l.get(l.size()-1);
            l.remove(l.size()-1);
        }
        
        helper2(root.left,lvl+1);
        helper2(root.right,lvl+1);
    }
    
}